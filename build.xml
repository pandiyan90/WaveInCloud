<!--
 * Copyright (C) 2009 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

  Author: dhanji@google.com (Dhanji R. Prasanna)
 -->
<project name="fedone" default="dist">
  <description>Google Wave Reference Implementation</description>

  <property file="build.properties"/>

  <!-- Classpath of external dependencies -->
  <path id="fedone.classpath">
    <fileset dir="${lib}">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${lib.runtime}">
      <include name="*/*.jar"/>
    </fileset>
    <fileset dir="${lib.codegen}">
      <include name="*/*.jar"/>
    </fileset>
    <!-- Hamcrest, JUnit, and Mockito included for some of the classes in src/**/testing/ . Maybe these shouldn't be in src after all? -->
    <fileset dir="${lib.test}">
      <include name="hamcrest/*.jar"/>
      <include name="junit/*.jar"/>
      <include name="mockito/*.jar"/>
    </fileset>
  </path>

  <!-- Classpath for testing only -->
  <path id="fedone.test.classpath">
    <fileset dir="${lib.test}">
      <include name="*.jar"/>
      <include name="*/*.jar"/>
    </fileset>
  </path>

  <property name="gwt.args" value=""/>

  <target name="clean" description="Cleans up the build artifacts and temporary directories">
    <delete dir="${build}"/>
  </target>

  <target name="init">
    <mkdir dir="${core.classes}"/>
    <mkdir dir="${test.classes}"/>
    <mkdir dir="${instr.classes}"/>
    <mkdir dir="${dir.distribute}"/>
    <mkdir dir="${staging}"/>
    <mkdir dir="${dir.testout}"/>
  </target>

  <!-- compiles pre-generated proto sources; does NOT generate protos -->
  <target name="proto_compile" depends="init">
    <javac sourcepath="" srcdir="proto_src" destdir="${core.classes}" debug="on"
        target="1.5">
      <include name="**/*.java"/>
      <classpath refid="fedone.classpath"/>
    </javac>
  </target>

  <target name="compile" depends="proto_compile, gen_gxp">
    <depend srcdir="${src}" destdir="${core.classes}" closure="yes"/>
    <javac sourcepath="" destdir="${core.classes}" debug="on" target="1.5"
      includeAntRuntime="false">
      <src path="${src}" />
      <src path="${gen}" />
      <include name="**/*.java"/>
      <classpath>
        <pathelement location="proto_gwt_src"/>
        <path refid="fedone.classpath"/>
      </classpath>
      <compilerarg value="-Werror"/>
      <compilerarg value="-Xlint:all"/>
      <compilerarg value="-Xlint:-serial"/>
      <!-- Deprecation warnings are generated for .class files for some
           compilers, e.g. org.hamcrest.Matcher -> org.hamcrest.BaseMatcher. -->
      <compilerarg value="-Xlint:-deprecation"/>
    </javac>

    <!-- copy non binary resources in src tree to output classpath -->
    <copy todir="${core.classes}">
      <fileset dir="${src}">
        <include name="**/*.xml"/>
        <include name="**/*.html"/>
        <include name="**/*.properties"/>
        <include name="**/*.proto"/>
      </fileset>
    </copy>
  </target>

  <target name="gen_gxp" description="Generates GXP files">
    <taskdef
        name="gxpc"
        classname="com.google.gxp.compiler.ant.GxpcTask"
        classpath="${lib.runtime}/gxp/gxp-0.2.4-beta.jar" />

    <!-- Generates the java files in a parallel directory under gen/ -->
    <gxpc
        srcdir="${src}"
        srcpaths="${src}"
        destdir="${gen}"
        target="org.waveprotocol.wave.examples.fedone.gxp" />
  </target>

  <target name="compile_tests" depends="compile" description="Compiles all the unit tests in the project">
    <depend srcdir="${test}" destdir="${test.classes}" closure="yes">
      <classpath>
        <pathelement location="${core.classes}"/>
      </classpath>
    </depend>
    <javac sourcepath="" srcdir="${test}" destdir="${test.classes}" debug="on"
        target="1.5" includeAntRuntime="false">
      <include name="**/*.java"/>
      <classpath>
        <path refid="fedone.classpath"/>
        <path refid="fedone.test.classpath"/>
        <pathelement location="${core.classes}"/>
      </classpath>
      <compilerarg value="-Werror"/>
      <compilerarg value="-Xlint:all"/>
      <compilerarg value="-Xlint:-serial"/>
      <!-- Deprecation warnings are generated for .class files for some
           compilers, e.g. org.hamcrest.Matcher -> org.hamcrest.BaseMatcher. -->
      <compilerarg value="-Xlint:-deprecation"/>
    </javac>

    <!-- copy non binary resources in src tree to output classpath -->
    <copy todir="${test.classes}">
      <fileset dir="${test}">
        <include name="**/*.xml"/>
        <include name="**/*.html"/>
        <include name="**/*.properties"/>
      </fileset>
    </copy>
  </target>

  <target name="test" depends="compile_tests" description=
    "Runs all the unit tests in the project excluding external persistence">

    <!-- Tests are run in a single new VM, when forkmode is set to once -->
    <junit fork="yes" forkmode="once" showoutput="no" failureProperty="test.failed">
      <classpath>
        <path refid="fedone.classpath"/>
        <path refid="fedone.test.classpath"/>
        <pathelement location="${core.classes}"/>
        <pathelement location="${test.classes}"/>
      </classpath>
      <formatter type="xml"/>
      <batchtest todir="${dir.testout}">
        <fileset dir="${test}">
          <include name="**/*Test.java"/>
          <!-- Exclude all persistence tests -->
          <exclude name="**/fedone/persistence/**"/>
        </fileset>
        <fileset dir="${test}">
          <!-- Include the persistence tests that aren't run elsewhere -->
          <include name="**/fedone/persistence/memory/*Test.java"/>
          <include name="**/fedone/persistence/file/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${dir.testout}">
      <fileset dir="${dir.testout}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${dir.testout}"/>
    </junitreport>

    <fail message="Tests failed. Check log and/or reports."
      if="test.failed" />
  </target>

  <!-- =================================
          target: test_mongodb
         ================================= -->
    <target name="test_mongodb" depends="compile_tests" description="Runs the MongoDb tests">
      <junit fork="yes" showoutput="no" failureProperty="test.failed">
        <classpath>
          <path refid="fedone.classpath"/>
          <path refid="fedone.test.classpath"/>
          <pathelement location="${core.classes}"/>
          <pathelement location="${test.classes}"/>
        </classpath>
        <formatter type="xml"/>
        <batchtest todir="${dir.testout}">
          <fileset dir="${test}">
            <!-- Include the mongoDb tests -->
            <include name="**/fedone/persistence/mongodb/**/*Test.java"/>
          </fileset>
        </batchtest>
      </junit>

      <junitreport todir="${dir.testout}">
        <fileset dir="${dir.testout}">
          <include name="TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="${dir.testout}"/>
      </junitreport>

      <fail message="Tests failed. Check log and/or reports."
        if="test.failed" />
    </target>

  <!-- compiles pre-generated gwt proto sources; does NOT generate protos -->
  <target name="proto_gwt_compile" depends="init">
    <javac sourcepath="" srcdir="proto_gwt_src" destdir="${core.classes}" debug="on"
        target="1.6">
      <include name="**/*.java"/>
      <classpath refid="fedone.classpath"/>
    </javac>
  </target>

  <target name="compile_gwt" depends="compile,proto_gwt_compile" description="GWT compile to JavaScript">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="proto_gwt_src"/>
        <pathelement location="src"/>
        <path refid="fedone.classpath"/>
        <path refid="fedone.test.classpath"/>
      </classpath>
      <jvmarg value="-Xmx512M"/>
      <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
      <arg line="-style PRETTY"/>
      <arg line="${gwt.args}"/>
      <arg value="org.waveprotocol.wave.examples.client.webclient.WebClient"/>
    </java>
  </target>

  <target name="hosted_gwt" depends="compile,proto_gwt_compile" description="GWT compile to JavaScript">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="proto_gwt_src"/>
        <pathelement location="src"/>
        <path refid="fedone.classpath"/>
      </classpath>
      <jvmarg value="-Xmx512M"/>
      <jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8001"/>
      <arg value="-noserver" />
      <arg line="-bindAddress 0.0.0.0" />
      <arg line="${gwt.args}"/>
      <arg value="org.waveprotocol.wave.examples.client.webclient.WebClient"/>
    </java>
  </target>

  <target name="stage" depends="compile" description="Copy classes and runtime depenencies to the staging directory">
    <!-- we unzip and copy all the runtime deps into a staging dir first -->
    <unzip dest="${staging}">
      <fileset dir="${lib}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${lib.runtime}">
        <include name="*/*.jar"/>
      </fileset>
    </unzip>
    <copy todir="${staging}" preservelastmodified="true">
      <fileset dir="${core.classes}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>

  <!-- target name="dist" depends="test, dist-api, dist-server, dist-client-console, dist-agent-echoey, dist-agent-probey" description="Compiles, tests and assembles artifacts" -->
  <target name="dist" depends="test, dist-server, dist-client-console, dist-agent-echoey, dist-agent-probey" description="Compiles, tests and assembles artifacts">
  </target>

  <!-- dist-api is broken due to non-runnable dependencies in the waveserver directory.  TODO: fix. -->
  <target name="dist-api" depends="stage" description="Assembles the FedOne API">
    <jar destfile="${jar.outfile-api}">
      <fileset dir="${staging}">
        <include name="org/waveprotocol/**/*" />
        <!-- Only exclude runnable targets -->
        <exclude name="org/waveprotocol/wave/examples/fedone/waveclient/agents/echoey/**/*" />
        <exclude name="org/waveprotocol/wave/examples/fedone/waveclient/agents/probey/**/*" />
        <exclude name="org/waveprotocol/wave/examples/fedone/waveclient/console/**/*" />
        <exclude name="org/waveprotocol/wave/examples/fedone/waveserver/**/*" />
      </fileset>
      <manifest>
        <attribute name="Implementation-Vendor" value="Google, Inc."/>
        <attribute name="Implementation-Title" value="Google Wave Reference Impl API"/>
        <attribute name="Implementation-Version" value="${fedone.version}"/>
      </manifest>
    </jar>
  </target>

  <target name="dist-server" depends="stage" description="Assembles the FedOne server">
    <jar destfile="${jar.outfile-server}">
      <fileset dir="${staging}">
        <include name="META-INF/services/*" />
        <include name="com/dyuproject/protostuff/**/*" />
        <include name="com/mongodb/**/*" />
        <include name="com/google/common/**/*" />
        <include name="com/google/gson/**/*" />
        <include name="com/google/gxp/**/*" />
        <include name="com/google/inject/**/*" />
        <include name="com/google/protobuf/**/*" />
        <include name="com/google/wave/**/*" />
        <include name="gnu/inet/**/*" />
        <include name="javax/inject/**/*" />
        <include name="javax/servlet/**/*" />
        <include name="javax/xml/**/*" />
        <include name="org/aopalliance/**/*" />
        <include name="org/apache/commons/cli/**/*" />
        <include name="org/apache/commons/codec/**/*" />
        <include name="org/bson/**/*" />
        <include name="org/codehaus/jackson/**/*" />
        <include name="org/dom4j/**/*" />
        <include name="org/eclipse/**/*" />
        <include name="org/jivesoftware/**/*" />
        <include name="org/joda/time/**/*" />
        <include name="org/json/**/*" />
        <include name="org/waveprotocol/**/*" />
        <include name="org/xmlpull/**/*" />
        <include name="org/xmpp/**/*" />
      </fileset>
      <manifest>
        <!-- Application entry point -->
        <attribute name="Main-Class"
          value="org.waveprotocol.wave.examples.fedone.ServerMain"/>
        <attribute name="Implementation-Vendor" value="Google, Inc."/>
        <attribute name="Implementation-Title" value="Google Wave FedOne Server"/>
        <attribute name="Implementation-Version" value="${fedone.version}"/>
      </manifest>
    </jar>
  </target>

  <target name="dist-client-console" depends="stage" description="Assembles the FedOne console client">
    <jar destfile="${jar.outfile-client-console}">
      <fileset dir="${staging}">
        <include name="com/dyuproject/protostuff/**/*" />
        <include name="com/google/common/**/*" />
        <include name="com/google/gson/**/*" />
        <include name="com/google/inject/**/*" />
        <include name="com/google/protobuf/**/*" />
        <include name="com/sixfire/websocket/*" />
        <include name="javax/inject/**/*" />
        <include name="jline/**/*" />
        <include name="org/apache/commons/codec/**/*" />
        <include name="org/codehaus/jackson/**/*" />
        <include name="org/waveprotocol/**/*" />
      </fileset>
      <manifest>
        <!-- Application entry point -->
        <attribute name="Main-Class"
          value="org.waveprotocol.wave.examples.client.console.ConsoleClient"/>
        <attribute name="Implementation-Vendor" value="Google, Inc."/>
        <attribute name="Implementation-Title" value="Google Wave FedOne Console Client"/>
        <attribute name="Implementation-Version" value="${fedone.version}"/>
      </manifest>
    </jar>
  </target>

  <target name="dist-agent-echoey" depends="stage" description="Assembles the FedOne echoey agent">
    <jar destfile="${jar.outfile-agent-echoey}">
      <fileset dir="${staging}">
        <include name="com/dyuproject/protostuff/**/*" />
        <include name="com/google/common/**/*" />
        <include name="com/google/gson/**/*" />
        <include name="com/google/inject/**/*" />
        <include name="com/google/protobuf/**/*" />
        <include name="com/sixfire/websocket/*" />
        <include name="javax/inject/**/*" />
        <include name="org/apache/commons/codec/**/*" />
        <include name="org/codehaus/jackson/**/*" />
        <include name="org/waveprotocol/**/*" />
      </fileset>
      <manifest>
        <!-- Application entry point -->
        <attribute name="Main-Class"
          value="org.waveprotocol.wave.examples.fedone.agents.echoey.Echoey"/>
        <attribute name="Implementation-Vendor" value="Google, Inc."/>
        <attribute name="Implementation-Title" value="Google Wave FedOne Echoey Agent"/>
        <attribute name="Implementation-Version" value="${fedone.version}"/>
      </manifest>
    </jar>
  </target>

  <target name="dist-agent-probey" depends="stage" description="Assembles the FedOne probey agent">
    <jar destfile="${jar.outfile-agent-probey}">
      <fileset dir="${staging}">
        <include name="com/dyuproject/protostuff/**/*" />
        <include name="com/google/common/**/*" />
        <include name="com/google/gson/**/*" />
        <include name="com/google/inject/**/*" />
        <include name="com/google/protobuf/**/*" />
        <include name="com/sixfire/websocket/*" />
        <include name="javax/inject/**/*" />
        <include name="javax/servlet/**/*" />
        <include name="org/apache/commons/codec/**/*" />
        <include name="org/codehaus/jackson/**/*" />
        <include name="org/eclipse/jetty/**/*" />
        <include name="org/waveprotocol/**/*" />
      </fileset>
      <manifest>
        <!-- Application entry point -->
        <attribute name="Main-Class"
          value="org.waveprotocol.wave.examples.fedone.agents.probey.Probey"/>
        <attribute name="Implementation-Vendor" value="Google, Inc."/>
        <attribute name="Implementation-Title" value="Google Wave FedOne Probey Agent"/>
        <attribute name="Implementation-Version" value="${fedone.version}"/>
      </manifest>
    </jar>
  </target>

  <!-- This rule should be run whenever the build configuration (i.e. build files, libraries) is changed -->
  <target name="dist-test" depends="dist, test" description="Runs all the unit tests in the project against the jar files">
    <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
      <classpath refid="fedone.test.classpath"/>
    </taskdef>

    <junit fork="yes" showoutput="no" haltonerror="yes">
      <classpath>
        <path refid="fedone.classpath"/>
        <path refid="fedone.test.classpath"/>
        <pathelement location="${jar.outfile-server}"/>
        <pathelement location="${test.classes}"/>
      </classpath>
      <batchtest>
        <fileset dir="${test}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
      <formatter type="xml"/>
    </junit>
  </target>

  <target name="doc" depends="stage" description="Builds the Java documentation for the mode, protocol, and FedOne">
    <javadoc sourcepath="${src}" destdir="${dir.docs}" linksource="yes">
      <classpath>
        <pathelement location="${staging}" />
      </classpath>
    </javadoc>
  </target>

</project>

