<!--
 * Copyright (C) 2009 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author: dhanji@google.com (Dhanji R. Prasanna)
 *         anorth@google.com (Alex North)
 -->
<project name="waveinabox" default="dist">
  <description>Wave in a Box</description>

  <property file="build.properties"/>

  <!-- Import common build defs and macros. -->
  <import file="${build.common.path}"/>

  <!-- Pull in the Emma tasks -->
  <taskdef resource="emma_ant.properties" classpathref="test.libpath"/>

  <!-- Import macros -->
  <import file="${build.macros.path}"/>

  <property name="gwt.args" value=""/>

  <!-- Standard time properties and a timestamp pattern -->
  <tstamp>
    <format property="DSTAMP_INT" pattern="-yyyy-MM-dd"/>
  </tstamp>
  <property name="release.name" value="wave-libraries${DSTAMP_INT}.zip"/>

  <target name="clean" description="Cleans up the build artifacts and temporary directories">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${doc.dir}"/>
    <delete dir="${gen.dir}"/>
    <delete dir="${test.out.dir}"/>
    <delete dir="war/waveharness"/>
    <delete dir="war/webclient"/>
  </target>

  <target name="init">
    <mkdir dir="${build.src.dir}"/>
    <mkdir dir="${build.test.dir}"/>
    <mkdir dir="${coverage.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${staging.dir}"/>
    <mkdir dir="${dep}"/>
    <mkdir dir="${test.out.dir}"/>
  </target>

  <!-- compiles pre-generated proto sources; does NOT generate protos --> 
  <target name="proto_src_dep">
    <uptodate targetfile="${dep}/proto_compile" property="skip.proto_compile">
      <srcfiles dir="${lib.dir}" includes="**/*"/>
      <srcfiles dir="proto_src" includes="**/*.java"/>
    </uptodate>
  </target>
  <target name="proto_compile" depends="init, proto_src_dep" unless="skip.proto_compile" description="Compiles protocol buffers">
    <javac sourcepath="" srcdir="proto_src" destdir="${build.src.dir}" debug="on"
        target="1.5">
      <include name="**/*.java"/>
      <classpath refid="libpath"/>
    </javac>
    <touch file="${dep}/proto_compile"/>
  </target>

  <target name="compile_dep">
    <uptodate targetfile="${dep}/compile" property="skip.compile">
      <srcfiles dir="${lib.dir}" includes="**/*"/>
      <srcfiles dir="${src.dir}" includes="**/*.java"/>
      <srcfiles dir="${gen.dir}" includes="**/*.java"/>
    </uptodate>
  </target>
  <target name="compile" depends="proto_compile, gen_gxp, compile_dep" unless="skip.compile" description="Compiles all source">
    <depend srcdir="${src.dir}" destdir="${build.src.dir}" closure="yes"/>
    <!-- Delegate to libraries build for o.w.wave. -->
    <ant antfile="build-libraries.xml" target="compile" />
    <javac sourcepath="" destdir="${build.src.dir}" debug="on" target="1.5"
      includeAntRuntime="false">
      <src path="${src.dir}" />
      <src path="${gen.dir}" />
      <include name="**/*.java"/>
      <classpath>
        <pathelement location="proto_gwt_src"/>
        <path refid="libpath"/>
      </classpath>
      <compilerarg value="-Werror"/>
      <compilerarg value="-Xlint:all"/>
      <compilerarg value="-Xlint:-serial"/>
      <!-- Deprecation warnings are generated for .class files for some
           compilers, e.g. org.hamcrest.Matcher -> org.hamcrest.BaseMatcher. -->
      <compilerarg value="-Xlint:-deprecation"/>
    </javac>

    <!-- copy non binary resources in src tree to output classpath -->
    <copy todir="${build.src.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.xml"/>
        <include name="**/*.html"/>
        <include name="**/*.properties"/>
        <include name="**/*.proto"/>
      </fileset>
    </copy>

    <touch file="${dep}/compile"/>
  </target>

  <target name="gen_gxp_dep">
    <uptodate targetfile="${dep}/gen_gxp" property="skip.gen_gxp">
      <srcfiles dir="${lib.runtime}/gxp" includes="*"/>
      <srcfiles dir="${src.dir}" includes="org/waveprotocol/box/server/gxp/*.gxp"/>
    </uptodate>
  </target>
  <target name="gen_gxp" description="Generates GXP files" depends="init, gen_gxp_dep" unless="skip.gen_gxp">
    <taskdef
        name="gxpc"
        classname="com.google.gxp.compiler.ant.GxpcTask"
        classpath="${lib.runtime}/gxp/gxp-0.2.4-beta.jar" />

    <!-- Generates the java files in a parallel directory under gen/ -->
    <gxpc
        srcdir="${src.dir}"
        srcpaths="${src.dir}"
        destdir="${gen.dir}"
        target="org.waveprotocol.box.server.gxp" />
    <touch file="${dep}/gen_gxp"/>
  </target>

  <target name="compile_tests" depends="compile" description="Compiles all the unit tests in the project">
    <depend srcdir="${test.dir}" destdir="${build.test.dir}" closure="yes">
      <classpath>
        <pathelement location="${build.src.dir}"/>
      </classpath>
    </depend>
    <javac sourcepath="" srcdir="${test.dir}" destdir="${build.test.dir}" debug="on"
        target="1.5" includeAntRuntime="false">
      <include name="**/*.java"/>
      <classpath>
        <path refid="libpath"/>
        <path refid="test.libpath"/>
        <pathelement location="${build.src.dir}"/>
      </classpath>
      <!-- TODO(anorth): enable -Werror after fixing warnings in o.w.wave. -->
      <!--compilerarg value="-Werror"/>
      <compilerarg value="-Xlint:all"/>
      <compilerarg value="-Xlint:-serial"/-->
      <!-- Deprecation warnings are generated for .class files for some
           compilers, e.g. org.hamcrest.Matcher -> org.hamcrest.BaseMatcher. -->
      <compilerarg value="-Xlint:-deprecation"/>
    </javac>

    <!-- copy non binary resources in src tree to output classpath -->
    <copy todir="${build.test.dir}">
      <fileset dir="${test.dir}">
        <include name="**/*.xml"/>
        <include name="**/*.html"/>
        <include name="**/*.properties"/>
      </fileset>
    </copy>
  </target>

  <!-- ===== Tests ==== -->

  <target name="test" depends="compile_tests" description=
    "Runs all the unit tests in the project excluding external persistence">

    <!-- Tests are run in a single new VM, when forkmode is set to once -->
    <runtests forkmode="once" coverage="true">
      <fileset dir="${test.dir}">
        <include name="**/*Test.java"/>
        <exclude name="**/*GwtTest.java"/>
        <exclude name="**/*LargeTest.java"/>
        <!-- Exclude all persistence tests -->
        <exclude name="**/server/persistence/**"/>
        <!-- Include the persistence tests that aren't run elsewhere -->
        <include name="**/server/persistence/memory/*Test.java"/>
        <include name="**/server/persistence/file/*Test.java"/>
      </fileset>
    </runtests>
  </target>

  <target name="test_large" depends="compile_tests" description="Runs large tests (slow)">
    <runtests forkmode="perTest" coverage="true">
      <fileset dir="${test.dir}">
        <include name="**/*LargeTest.java"/>
      </fileset>
    </runtests>
  </target>

  <target name="test_gwt" depends="compile_tests" description="Runs GWT tests (slow)">
    <!-- Fork just once due to GWT test failure in shared JVM -->
    <!-- EMMA disabled due to GWT incompatibility -->
    <runtests forkmode="once" coverage="false">
      <fileset dir="${test.dir}">
        <include name="**/*GwtTest.java"/>
      </fileset>
    </runtests>
  </target>

  <target name="test_mongodb" depends="compile_tests" description="Runs the MongoDb tests">
    <runtests forkmode="once" coverage="true">
      <fileset dir="${test.dir}">
        <!-- Include the mongoDb tests -->
        <include name="**/server/persistence/mongodb/**/*Test.java"/>
      </fileset>
    </runtests>
  </target>

  <target name="test_all" depends="compile_tests, test, test_gwt, test_large, test_mongodb"
      description="Run all tests, including GWT"/>

  <!-- compiles pre-generated gwt proto sources; does NOT generate protos -->
  <target name="compile_proto_gwt_dep">
    <uptodate targetfile="${dep}/compile_proto_gwt_dep" property="skip.compile_proto_gwt">
      <srcfiles dir="${lib.dir}" includes="**/*"/>
      <srcfiles dir="proto_gwt_src" includes="**/*.java"/>
    </uptodate>
  </target>
  <target name="compile_proto_gwt" depends="init, compile_proto_gwt_dep" unless="skip.compile_proto_gwt">
    <javac sourcepath="" srcdir="proto_gwt_src" destdir="${build.src.dir}" debug="on"
        target="1.6">
      <include name="**/*.java"/>
      <classpath refid="libpath"/>
    </javac>
    <touch file="${dep}/compile_proto_gwt_dep"/>
  </target>

  <target name="compile_gwt_dep">
    <uptodate targetfile="${dep}/compile_gwt" property="skip.compile_gwt">
      <srcfiles dir="${lib.dir}" includes="**/*"/>
      <srcfiles dir="src" includes="**/*"/>
      <srcfiles dir="proto_gwt_src" includes="**/*"/>
    </uptodate>
  </target>
  <target name="compile_gwt" depends="compile, compile_proto_gwt, compile_gwt_dep" description="GWT compile to production JavaScript" unless="skip.compile_gwt">    
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="proto_gwt_src"/>
        <pathelement location="src"/>
        <path refid="libpath"/>
        <path refid="test.libpath"/>
      </classpath>
      <jvmarg value="-Xmx512M"/>
      <!-- Small Javascript size. -->
      <arg line="-style OBFUSCATED"/>
      <!-- Do not include class and package names in compiled JS. -->
      <arg line="-XdisableClassMetadata"/>
      <arg line="-XdisableCastChecking"/>
      <arg line="${gwt.args}"/>
      <arg value="org.waveprotocol.box.webclient.WebClientProd"/>
    </java>
    <!-- Only one GWT compile output is valid at any one time. -->
    <delete file="${dep}/compile_gwt_dev"/>
    <touch file="${dep}/compile_gwt"/>
  </target>

  <target name="compile_gwt_dev_dep">
    <uptodate targetfile="${dep}/compile_gwt_dev" property="skip.compile_gwt_dev">
      <srcfiles dir="${lib.dir}" includes="**/*"/>
      <srcfiles dir="src" includes="**/*"/>
      <srcfiles dir="proto_gwt_src" includes="**/*"/>
    </uptodate>
  </target>
  <target name="compile_gwt_dev" depends="compile, compile_proto_gwt, compile_gwt_dev_dep" description="GWT compile of a restricted set of permutations suitable for development." unless="skip.compile_gwt_dev">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
      <classpath>
        <pathelement location="proto_gwt_src"/>
        <pathelement location="src"/>
        <path refid="libpath"/>
        <path refid="test.libpath"/>
      </classpath>
      <jvmarg value="-Xmx512M"/>
      <!-- Human-readable JS. -->
      <arg line="-style PRETTY"/>
      <!-- Less optimal JS, but faster compile. -->
      <arg line="-draftCompile"/>
      <!-- Assertions on. -->
      <arg line="-ea"/>
      <arg line="${gwt.args}"/>
      <arg value="org.waveprotocol.box.webclient.WebClientDev"/>
    </java>
    <!-- Only one GWT compile output is valid at any one time. -->
    <delete file="${dep}/compile_gwt"/>
    <touch file="${dep}/compile_gwt_dev"/>
  </target>

  <target name="hosted_gwt" depends="compile,compile_proto_gwt" description="Runs the hosted mode server, for debugging the GWT client in a JVM.">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="proto_gwt_src"/>
        <pathelement location="src"/>
        <path refid="libpath"/>
      </classpath>
      <jvmarg value="-Xmx512M"/>
      <jvmarg value="-ea"/>
      <jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8001"/>
      <arg value="-noserver" />
      <arg line="-bindAddress 0.0.0.0" />
      <arg line="${gwt.args}"/>
      <arg value="org.waveprotocol.box.webclient.WebClientProd"/>
    </java>
  </target>

  <target name="editor_hosted" depends="compile,compile_proto_gwt" description="Runs the editor harness through the GWT hosted mode server, for debugging in a JVM.">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="proto_gwt_src"/>
        <pathelement location="src"/>
        <path refid="libpath"/>
      </classpath>
      <jvmarg value="-Xmx512M"/>
      <jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8001"/>
      <arg line="${gwt.args}"/>
      <arg line="-war war"/>
      <arg line="-startupUrl org.waveprotocol.wave.client.editor.harness.EditorTest/EditorTest.html"/>
      <arg value="org.waveprotocol.wave.client.editor.harness.EditorTest"/>
    </java>
  </target>

  <target name="waveharness_hosted" depends="compile,compile_proto_gwt" description="Runs the wave panel harness through the GWT hosted mode server, for debugging in a JVM.">
    <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
      <classpath>
        <pathelement location="proto_gwt_src"/>
        <pathelement location="src"/>
        <path refid="libpath"/>
      </classpath>
      <jvmarg value="-Xmx512M"/>
      <jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8001"/>
      <arg line="${gwt.args}"/>
      <arg line="-war war"/>
      <arg line="-startupUrl waveharness/UndercurrentHarness.html"/>
      <arg value="org.waveprotocol.wave.client.testing.UndercurrentHarness"/>
    </java>
  </target>

  <target name="stage_dep">
    <uptodate targetfile="${dep}/stage" property="skip.stage">
      <srcfiles dir="${lib.runtime}" includes="**/*.jar"/>
      <srcfiles dir="${build.src.dir}" includes="**/*"/>
    </uptodate>
  </target>
  <target name="stage" depends="compile, stage_dep" description="Copy classes and runtime depenencies to the staging directory" unless="skip.stage">
    <!-- we unzip and copy all the runtime deps into a staging dir first -->
    <unzip dest="${staging.dir}">
      <fileset dir="${lib.runtime}">
        <include name="*/*.jar"/>
      </fileset>
    </unzip>
    <copy todir="${staging.dir}" preservelastmodified="true">
      <fileset dir="${build.src.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <touch file="${dep}/stage"/>
  </target>

  <target name="dist" depends="test, dist-libraries, dist-server, dist-client-console, compile_gwt"
      description="Compiles, tests and assembles artifacts">
  </target>

  <target name="dist-libraries" depends="compile">
    <ant antfile="build-libraries.xml" target="dist" />
  </target>

  <!-- dist-api is broken due to non-runnable dependencies in the waveserver directory.  TODO: fix. -->
  <target name="dist-api" depends="stage" description="Assembles the Wave in a Box API">
    <jar destfile="${api.jar.out}">
      <fileset dir="${staging.dir}">
        <include name="org/waveprotocol/**/*" />
        <!-- Only exclude runnable targets -->
        <exclude name="org/waveprotocol/box/consoleclient/**/*" />
        <exclude name="org/waveprotocol/box/server/waveserver/**/*" />
      </fileset>
      <manifest>
        <attribute name="Implementation-Vendor" value="Google, Inc."/>
        <attribute name="Implementation-Title" value="Google Wave Reference Impl API"/>
        <attribute name="Implementation-Version" value="${waveinabox.version}"/>
      </manifest>
    </jar>
  </target>

  <!-- A healthy mix of hyphens and underscores never hurt anyone.  Sigh. -->
  <target name="dist-server_dep">
    <!-- Note: this check is still very slow (~30secs) -->
    <uptodate targetfile="${dep}/dist-server" property="skip.dist-server">
      <srcfiles dir="${staging.dir}" includes="**/*"/>
    </uptodate>
  </target>
  <target name="dist-server" depends="stage, dist-server_dep" description="Assembles the Wave in a Box server" unless="skip.dist-server">
    <jar destfile="${server.jar.out}">
      <fileset dir="${staging.dir}">
        <include name="META-INF/services/*" />
        <include name="com/dyuproject/protostuff/**/*" />
        <include name="com/mongodb/**/*" />
        <include name="com/glines/socketio/**/*" />
        <include name="com/google/common/**/*" />
        <include name="com/google/gson/**/*" />
        <include name="com/google/gxp/**/*" />
        <include name="com/google/inject/**/*" />
        <include name="com/google/protobuf/**/*" />
        <include name="com/google/wave/**/*" />
        <include name="gnu/inet/**/*" />
        <include name="javax/inject/**/*" />
        <include name="javax/servlet/**/*" />
        <include name="javax/xml/**/*" />
        <include name="net/oauth/**/*" />
        <include name="org/aopalliance/**/*" />
        <include name="org/apache/commons/cli/**/*" />
        <include name="org/apache/commons/codec/**/*" />
        <include name="org/apache/commons/collections/**/*" />
        <include name="org/apache/commons/configuration/**/*" />
        <include name="org/apache/commons/httpclient/**/*" />
        <include name="org/apache/commons/lang/**/*" />
        <include name="org/apache/commons/logging/**/*" />
        <include name="org/bson/**/*" />
        <include name="org/codehaus/jackson/**/*" />
        <include name="org/dom4j/**/*" />
        <include name="org/eclipse/**/*" />
        <include name="org/jdom/**/*" />
        <include name="org/jivesoftware/**/*" />
        <include name="org/joda/time/**/*" />
        <include name="org/json/**/*" />
        <include name="org/waveprotocol/**/*" />
        <include name="org/xmlpull/**/*" />
        <include name="org/xmpp/**/*" />
      </fileset>
      <manifest>
        <!-- Application entry point -->
        <attribute name="Main-Class"
          value="org.waveprotocol.box.server.ServerMain"/>
        <attribute name="Implementation-Vendor" value="Google, Inc."/>
        <attribute name="Implementation-Title" value="Wave in a Box Server"/>
        <attribute name="Implementation-Version" value="${waveinabox.version}"/>
      </manifest>
    </jar>
    <touch file="${dep}/dist-server"/>
  </target>

  <target name="dist-client-console" depends="stage" description="Assembles the Wave in a Box console client">
    <jar destfile="${consoleclient.jar.out}">
      <fileset dir="${staging.dir}">
        <include name="com/dyuproject/protostuff/**/*" />
        <include name="com/google/common/**/*" />
        <include name="com/google/gson/**/*" />
        <include name="com/google/inject/**/*" />
        <include name="com/google/protobuf/**/*" />
        <include name="com/sixfire/websocket/*" />
        <include name="javax/inject/**/*" />
        <include name="jline/**/*" />
        <include name="org/apache/commons/codec/**/*" />
        <include name="org/codehaus/jackson/**/*" />
        <include name="org/waveprotocol/**/*" />
      </fileset>
      <manifest>
        <!-- Application entry point -->
        <attribute name="Main-Class"
          value="org.waveprotocol.box.consoleclient.ConsoleClient"/>
        <attribute name="Implementation-Vendor" value="Google, Inc."/>
        <attribute name="Implementation-Title" value="Wave in a Box Console Client"/>
        <attribute name="Implementation-Version" value="${waveinabox.version}"/>
      </manifest>
    </jar>
  </target>

  <!-- This rule should be run whenever the build configuration (i.e. build files, libraries) is changed -->
  <target name="dist-test" depends="dist, test" description="Runs all the unit tests in the project against the jar files">
    <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
      <classpath refid="test.libpath"/>
    </taskdef>

    <junit fork="yes" showoutput="no" haltonerror="yes">
      <classpath>
        <path refid="libpath"/>
        <path refid="test.libpath"/>
        <pathelement location="${server.jar.out}"/>
        <pathelement location="${build.test.dir}"/>
      </classpath>
      <batchtest>
        <fileset dir="${test.dir}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
      <formatter type="xml"/>
    </junit>
  </target>

  <target name="release" depends="dist" description="Creates a zip for a release">
    <delete file="${dist.dir}/${release.name}"/>
    <zip destfile="${dist.dir}/${release.name}">
      <zipfileset dir="${dist.dir}" includes="*.jar"/>
      <zipfileset dir="${basedir}" includes="COPYING"/>
    </zip>
  </target>

  <target name="doc" depends="stage" description="Builds the Java documentation for the mode, protocol, and Wave in a Box">
    <javadoc sourcepath="${src.dir}" destdir="${docs.dir}" linksource="yes" author="yes" protected="yes"
        windowtitle="${ant.project.name} Documentation">
      <classpath>
        <pathelement location="${staging.dir}" />
        <path refid="libpath"/>
        <path location="${build.proto.dir}"/>
      </classpath>
      <doctitle>${ant.project.name}</doctitle>
      <footer>&lt;a href="http://www.waveprotocol.org/"&gt;Wave Project&lt;a/&gt;</footer>
    </javadoc> 
  </target>

</project>

