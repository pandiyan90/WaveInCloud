/**
 * Copyright 2009 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// The client-server protocol for the prototype waveserver/client.
// This protocol is a very simple example of how a client/server protocol may
// be implemented.
//
// Author: jochen@google.com (Jochen Bekmann)

syntax = "proto2";

import "org/waveprotocol/wave/protocol/common.proto";
import "org/waveprotocol/wave/examples/fedone/rpc/rpc.proto";

package waveserver;

option java_package = "org.waveprotocol.wave.examples.fedone.waveserver";
option java_outer_classname = "WaveClientRpc";

service ProtocolWaveClientRpc {
  rpc Open (ProtocolOpenRequest) returns (ProtocolWaveletUpdate) {
    option (rpc.isStreamingRpc) = true;
  };
  rpc Submit (ProtocolSubmitRequest) returns (ProtocolSubmitResponse);
}

/**
 * A client requests updates for wavelets in the given waveId and accessible to the
 * given participant. All wavelets in the set will be streamed in version order,
 * starting at version 0.
 *
 * The default is that there is no order defined for update ordering by waveletId,
 * however for Index Waves (TODO: define this) these will be streamed
 * in date order, capped by the maximumWavelets parameter.
 */
message ProtocolOpenRequest {
  required string participantId = 1;
  required string waveId = 2;
  repeated string waveletIdPrefix = 3;
  optional int32  maximumWavelets = 4;
}

/**
 * Update for a wavelet.
 * Must contain either one or more applied deltas or a commit notice.
 */
message ProtocolWaveletUpdate {
  // Specifies the wavelet name in the URI netpath notation.
  required string waveletName = 1;

  // Zero or more deltas for this wavelet, streamed in order.
  repeated protocol.ProtocolWaveletDelta appliedDelta = 2;
  
  // Indicates that the host server has committed the wavelet to disk at the
  // given version.
  optional protocol.ProtocolHashedVersion commitNotice = 3;

  // Resulting version of the wavelet after all deltas have been applied
  // May only be missing if there are no appliedDeltas
  optional protocol.ProtocolHashedVersion resultingVersion = 4;
}

/**
 * The client requests that the given delta be applied to the wavelet.
 */
message ProtocolSubmitRequest {
  required string waveletName = 1;
  required protocol.ProtocolWaveletDelta delta = 2;
}

/**
 * The result of submitting the delta to the server. If an error occurs
 * errorMessage will be present. operationsApplied will report the actual
 * number of operations successfully applied to the wavelet by the server.
 */
message ProtocolSubmitResponse {
  required int32 operationsApplied = 1;
  optional string errorMessage = 2;
}
