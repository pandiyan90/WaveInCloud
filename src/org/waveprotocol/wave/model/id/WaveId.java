/**
 * Copyright 2009 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package org.waveprotocol.wave.model.id;

/**
 * A wave is identified by a tuple of a wave provider domain and a local
 * identifier which is unique within the domain.
 *
 *
 */
public final class WaveId implements Comparable<WaveId> {

  private final String domain;
  private final String id;

  /**
   * Creates a WaveId from a serialized wave id.
   * @param waveIdString a serialized wave id
   * @return a WaveId
   */
  public static WaveId deserialise(String waveIdString) {
    return LongIdSerialiser.INSTANCE.deserialiseWaveId(waveIdString);
  }

  /**
   * @param domain must not be null. This is assumed to be of a valid canonical domain format.
   * @param id must not be null. This is assumed to be escaped with
   *   SimplePrefixEscaper.DEFAULT_ESCAPER.
   */
  public WaveId(String domain, String id) {
    if (domain == null || id == null) {
      throw new NullPointerException("Cannot create WaveId with null value in [domain:" + domain +
          "] [id:" + id + "]");
    }

    if (SimplePrefixEscaper.DEFAULT_ESCAPER.hasEscapeCharacters(domain)) {
      throw new IllegalArgumentException(
          "Domain cannot contain characters that requires escaping: " + domain);
    }

    if (!SimplePrefixEscaper.DEFAULT_ESCAPER.isEscapedProperly(IdConstants.TOKEN_SEPARATOR, id)) {
      throw new IllegalArgumentException("Id is not properly escaped: " + id);
    }

    this.domain = domain;
    this.id = id;
  }

  /**
   * @return the domain
   */
  public String getDomain() {
    return domain;
  }

  /**
   * @return the local id
   */
  public String getId() {
    return id;
  }

  /**
   * Serialises this waveId into a unique string. For any two wave ids,
   * waveId1.serialise().equals(waveId2.serialise()) iff waveId1.equals(waveId2).
   */
  public String serialise() {
    return LongIdSerialiser.INSTANCE.serialiseWaveId(this);
  }

  /**
   * Generated by eclipse.
   * {@inheritDoc}
   */
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    return result;
  }

  /**
   * Generated by eclipse.
   * {@inheritDoc}
   */
  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (getClass() != obj.getClass()) return false;
    WaveId other = (WaveId) obj;
    if (!domain.equals(other.domain)) return false;
    if (!id.equals(other.id)) return false;
    return true;
  }

  @Override
  public String toString() {
    return "[WaveId:" + serialise() + "]";
  }

  @Override
  public int compareTo(WaveId other) {
    int domainCompare = domain.compareTo(other.domain);
    if (domainCompare == 0) {
      return id.compareTo(other.id);
    } else {
      return domainCompare;
    }
  }
}
