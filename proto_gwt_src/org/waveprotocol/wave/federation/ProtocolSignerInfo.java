// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from federation.protodevel

package org.waveprotocol.wave.federation;

import com.google.gwt.core.client.*;

public class ProtocolSignerInfo extends JavaScriptObject  {

    public static class HashAlgorithm extends JavaScriptObject {
            
        public static final HashAlgorithm SHA256 = create(1);
        public static final HashAlgorithm SHA512 = create(2);
        
        private static native HashAlgorithm create(int number) /*-{
            return number;
        }-*/;
        
        protected HashAlgorithm() {}

        public final native int getNumber() /*-{
            return this;
        }-*/;
        
    }


    public static class Builder extends ProtocolSignerInfo {
      protected Builder() { }
      public final ProtocolSignerInfo build() {
        return (ProtocolSignerInfo)this;
      }
      public static native Builder create() /*-{
        return {
        };
      }-*/;
    }

    public static final Builder newBuilder() {
      return Builder.create();
    }
    
    /**
     * Creates a new ProtocolSignerInfo instance 
     *
     * @return new ProtocolSignerInfo instance
     */
    public static native ProtocolSignerInfo create() /*-{
        return {
          "_protoMessageName": "ProtocolSignerInfo",              
        };
    }-*/;

    /**
     * Creates a new JsArray<ProtocolSignerInfo> instance 
     *
     * @return new JsArray<ProtocolSignerInfo> instance
     */
    public static native JsArray<ProtocolSignerInfo> createArray() /*-{
        return [];
    }-*/;

    /**
     * Returns the name of this protocol buffer.
     */
    public static native String getProtocolBufferName(JavaScriptObject instance) /*-{
        return instance._protoMessageName;
    }-*/;

    /**
     * Gets a ProtocolSignerInfo (casting) from a JavaScriptObject
     *
     * @param JavaScriptObject to cast
     * @return ProtocolSignerInfo
     */
    public static native ProtocolSignerInfo get(JavaScriptObject jso) /*-{
        return jso;
    }-*/;

    /**
     * Gets a JsArray<ProtocolSignerInfo> (casting) from a JavaScriptObject
     *
     * @param JavaScriptObject to cast
     * @return JsArray<ProtocolSignerInfo> 
     */
    public static native JsArray<ProtocolSignerInfo> getArray(JavaScriptObject jso) /*-{
        return jso;
    }-*/;

    /**
     * Parses a ProtocolSignerInfo from a json string
     *
     * @param json string to be parsed/evaluated
     * @return ProtocolSignerInfo 
     */
    public static native ProtocolSignerInfo parse(String json) /*-{
        return eval("(" + json + ")");
    }-*/;

    /**
     * Parses a JsArray<ProtocolSignerInfo> from a json string
     *
     * @param json string to be parsed/evaluated
     * @return JsArray<ProtocolSignerInfo> 
     */
    public static native JsArray<ProtocolSignerInfo> parseArray(String json) /*-{
        return eval("(" + json + ")");
    }-*/;
    
    /**
     * Serializes a json object to a json string.
     *
     * @param ProtocolSignerInfo the object to serialize
     * @return String the serialized json string
     */
    public static native String stringify(ProtocolSignerInfo obj) /*-{
        var buf = [];
        var _1 = obj["1"];
        if(_1 != null)
            buf.push("\"1\":" + _1);
        var _2 = obj["2"];
        if(_2 != null)
            buf.push("\"2\":\"" + _2 + "\"");
        var _3 = obj["3"];
        if(_3 != null && _3.length != 0) {
            buf.push("\"3\":[\"" + _3.join("\",\"") + "\"]");
        }

        return buf.length == 0 ? "{}" : "{" + buf.join(",") + "}";
    }-*/;
    
    public static native boolean isInitialized(ProtocolSignerInfo obj) /*-{
        return 
            obj["1"] != null 
            && obj["2"] != null;
    }-*/;

    protected ProtocolSignerInfo() {}

    // getters and setters

    // hashAlgorithm

    public final native HashAlgorithm getHashAlgorithm() /*-{
        var v = this["1"];
        return v == null ? 1 : v;
    }-*/;

    public final native ProtocolSignerInfo setHashAlgorithm(HashAlgorithm hashAlgorithm) /*-{
        this["1"] = hashAlgorithm;
        return this;
    }-*/;

    public final native void clearHashAlgorithm() /*-{
        delete this["1"];
    }-*/;

    public final native boolean hasHashAlgorithm() /*-{
        return this["1"] != null;
    }-*/;

    // domain

    public final native String getDomain() /*-{
        return this["2"] || "";
    }-*/;

    public final native ProtocolSignerInfo setDomain(String domain) /*-{
        this["2"] = domain;
        return this;
    }-*/;

    public final native void clearDomain() /*-{
        delete this["2"];
    }-*/;

    public final native boolean hasDomain() /*-{
        return this["2"] != null;
    }-*/;

    // certificate

    public final native JsArrayString getCertificateArray() /*-{
        return this["3"];
    }-*/;

    public final java.util.List<String> getCertificateList() {
        JsArrayString array = getCertificateArray();
        java.util.List<String> list = new java.util.ArrayList<String>();
        
        if (array == null) {
          return null; 
        }
        for (int i=0; i < getCertificateCount(); i++) {
          list.add(array.get(i));
        }
        return list;
    }

    public final native ProtocolSignerInfo setCertificateArray(JsArrayString certificate) /*-{
        this["3"] = certificate;
        return this;
    }-*/;

    public final native JsArrayString clearCertificateArray() /*-{
        return (this["3"] = []);
    }-*/;

    public final String getCertificate(int index) {
        JsArrayString array = getCertificateArray();
        return array == null ? null : array.get(index);
    }

    public final int getCertificateCount() {
        JsArrayString array = getCertificateArray();
        return array == null ? 0 : array.length();
    }

    public final void addCertificate(String certificate) {
        JsArrayString array = getCertificateArray();
        if(array == null)
            array = clearCertificateArray();
        array.push(certificate);
    }


}