// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from waveclient-rpc.proto

package org.waveprotocol.wave.examples.fedone.waveserver;

import com.google.gwt.core.client.*;

public class WaveViewSnapshot extends JavaScriptObject  {


    public static class Builder extends WaveViewSnapshot {
      protected Builder() { }
      public final WaveViewSnapshot build() {
        return (WaveViewSnapshot)this;
      }
      public static native Builder create() /*-{
        return {
        };
      }-*/;
    }

    public static final Builder newBuilder() {
      return Builder.create();
    }
    
    /**
     * Creates a new WaveViewSnapshot instance 
     *
     * @return new WaveViewSnapshot instance
     */
    public static native WaveViewSnapshot create() /*-{
        return {
          "_protoMessageName": "WaveViewSnapshot",              
        };
    }-*/;

    /**
     * Creates a new JsArray<WaveViewSnapshot> instance 
     *
     * @return new JsArray<WaveViewSnapshot> instance
     */
    public static native JsArray<WaveViewSnapshot> createArray() /*-{
        return [];
    }-*/;

    /**
     * Returns the name of this protocol buffer.
     */
    public static native String getProtocolBufferName(JavaScriptObject instance) /*-{
        return instance._protoMessageName;
    }-*/;

    /**
     * Gets a WaveViewSnapshot (casting) from a JavaScriptObject
     *
     * @param JavaScriptObject to cast
     * @return WaveViewSnapshot
     */
    public static native WaveViewSnapshot get(JavaScriptObject jso) /*-{
        return jso;
    }-*/;

    /**
     * Gets a JsArray<WaveViewSnapshot> (casting) from a JavaScriptObject
     *
     * @param JavaScriptObject to cast
     * @return JsArray<WaveViewSnapshot> 
     */
    public static native JsArray<WaveViewSnapshot> getArray(JavaScriptObject jso) /*-{
        return jso;
    }-*/;

    /**
     * Parses a WaveViewSnapshot from a json string
     *
     * @param json string to be parsed/evaluated
     * @return WaveViewSnapshot 
     */
    public static native WaveViewSnapshot parse(String json) /*-{
        return eval("(" + json + ")");
    }-*/;

    /**
     * Parses a JsArray<WaveViewSnapshot> from a json string
     *
     * @param json string to be parsed/evaluated
     * @return JsArray<WaveViewSnapshot> 
     */
    public static native JsArray<WaveViewSnapshot> parseArray(String json) /*-{
        return eval("(" + json + ")");
    }-*/;
    
    /**
     * Serializes a json object to a json string.
     *
     * @param WaveViewSnapshot the object to serialize
     * @return String the serialized json string
     */
    public static native String stringify(WaveViewSnapshot obj) /*-{
        var buf = [];
        var _1 = obj["1"];
        if(_1 != null)
            buf.push("\"1\":\"" + _1 + "\"");
        var _2 = obj["2"];
        if(_2 != null && _2.length != 0) {
            var b = [], fn = @org.waveprotocol.wave.examples.fedone.waveserver.WaveletSnapshot::stringify(Lorg/waveprotocol/wave/examples/fedone/waveserver/WaveletSnapshot;);
            for(var i=0,l=_2.length; i<l; i++)
                b.push(fn(_2[i]));
            buf.push("\"2\":[" + b.join(",") + "]");
        }

        return buf.length == 0 ? "{}" : "{" + buf.join(",") + "}";
    }-*/;
    
    public static native boolean isInitialized(WaveViewSnapshot obj) /*-{
        return 
            obj["1"] != null;
    }-*/;

    protected WaveViewSnapshot() {}

    // getters and setters

    // waveId

    public final native String getWaveId() /*-{
        return this["1"] || "";
    }-*/;

    public final native WaveViewSnapshot setWaveId(String waveId) /*-{
        this["1"] = waveId;
        return this;
    }-*/;

    public final native void clearWaveId() /*-{
        delete this["1"];
    }-*/;

    public final native boolean hasWaveId() /*-{
        return this["1"] != null;
    }-*/;

    // wavelet

    public final native JsArray<WaveletSnapshot> getWaveletArray() /*-{
        return this["2"];
    }-*/;

    public final java.util.List<WaveletSnapshot> getWaveletList() {
        JsArray<WaveletSnapshot> array = getWaveletArray();
        java.util.List<WaveletSnapshot> list = new java.util.ArrayList<WaveletSnapshot>();
        
        if (array == null) {
          return null; 
        }
        for (int i=0; i < getWaveletCount(); i++) {
          list.add(array.get(i));
        }
        return list;
    }

    public final native WaveViewSnapshot setWaveletArray(JsArray<WaveletSnapshot> wavelet) /*-{
        this["2"] = wavelet;
        return this;
    }-*/;

    public final native JsArray<WaveletSnapshot> clearWaveletArray() /*-{
        return (this["2"] = []);
    }-*/;

    public final WaveletSnapshot getWavelet(int index) {
        JsArray<WaveletSnapshot> array = getWaveletArray();
        return array == null ? null : array.get(index);
    }

    public final int getWaveletCount() {
        JsArray<WaveletSnapshot> array = getWaveletArray();
        return array == null ? 0 : array.length();
    }

    public final void addWavelet(WaveletSnapshot wavelet) {
        JsArray<WaveletSnapshot> array = getWaveletArray();
        if(array == null)
            array = clearWaveletArray();
        array.push(wavelet);
    }


}