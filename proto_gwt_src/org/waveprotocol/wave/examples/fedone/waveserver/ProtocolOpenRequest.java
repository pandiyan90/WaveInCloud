// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from waveclient-rpc.proto

package org.waveprotocol.wave.examples.fedone.waveserver;

import com.google.gwt.core.client.*;

public class ProtocolOpenRequest extends JavaScriptObject  {


    public static class Builder extends ProtocolOpenRequest {
      protected Builder() { }
      public final ProtocolOpenRequest build() {
        return (ProtocolOpenRequest)this;
      }
      public static native Builder create() /*-{
        return {
        };
      }-*/;
    }

    public static final Builder newBuilder() {
      return Builder.create();
    }
    
    /**
     * Creates a new ProtocolOpenRequest instance 
     *
     * @return new ProtocolOpenRequest instance
     */
    public static native ProtocolOpenRequest create() /*-{
        return {
          "_protoMessageName": "ProtocolOpenRequest",              
        };
    }-*/;

    /**
     * Creates a new JsArray<ProtocolOpenRequest> instance 
     *
     * @return new JsArray<ProtocolOpenRequest> instance
     */
    public static native JsArray<ProtocolOpenRequest> createArray() /*-{
        return [];
    }-*/;

    /**
     * Returns the name of this protocol buffer.
     */
    public static native String getProtocolBufferName(JavaScriptObject instance) /*-{
        return instance._protoMessageName;
    }-*/;

    /**
     * Gets a ProtocolOpenRequest (casting) from a JavaScriptObject
     *
     * @param JavaScriptObject to cast
     * @return ProtocolOpenRequest
     */
    public static native ProtocolOpenRequest get(JavaScriptObject jso) /*-{
        return jso;
    }-*/;

    /**
     * Gets a JsArray<ProtocolOpenRequest> (casting) from a JavaScriptObject
     *
     * @param JavaScriptObject to cast
     * @return JsArray<ProtocolOpenRequest> 
     */
    public static native JsArray<ProtocolOpenRequest> getArray(JavaScriptObject jso) /*-{
        return jso;
    }-*/;

    /**
     * Parses a ProtocolOpenRequest from a json string
     *
     * @param json string to be parsed/evaluated
     * @return ProtocolOpenRequest 
     */
    public static native ProtocolOpenRequest parse(String json) /*-{
        return eval("(" + json + ")");
    }-*/;

    /**
     * Parses a JsArray<ProtocolOpenRequest> from a json string
     *
     * @param json string to be parsed/evaluated
     * @return JsArray<ProtocolOpenRequest> 
     */
    public static native JsArray<ProtocolOpenRequest> parseArray(String json) /*-{
        return eval("(" + json + ")");
    }-*/;
    
    /**
     * Serializes a json object to a json string.
     *
     * @param ProtocolOpenRequest the object to serialize
     * @return String the serialized json string
     */
    public static native String stringify(ProtocolOpenRequest obj) /*-{
        var buf = [];
        var _1 = obj["1"];
        if(_1 != null)
            buf.push("\"1\":\"" + _1 + "\"");
        var _2 = obj["2"];
        if(_2 != null)
            buf.push("\"2\":\"" + _2 + "\"");
        var _3 = obj["3"];
        if(_3 != null && _3.length != 0) {
            buf.push("\"3\":[\"" + _3.join("\",\"") + "\"]");
        }
        var _4 = obj["4"];
        if(_4 != null)
            buf.push("\"4\":" + _4);
        var _5 = obj["5"];
        if(_5 != null)
            buf.push("\"5\":" + _5);
        var _6 = obj["6"];
        if(_6 != null && _6.length != 0) {
            var b = [], fn = @org.waveprotocol.wave.examples.fedone.waveserver.WaveletVersion::stringify(Lorg/waveprotocol/wave/examples/fedone/waveserver/WaveletVersion;);
            for(var i=0,l=_6.length; i<l; i++)
                b.push(fn(_6[i]));
            buf.push("\"6\":[" + b.join(",") + "]");
        }

        return buf.length == 0 ? "{}" : "{" + buf.join(",") + "}";
    }-*/;
    
    public static native boolean isInitialized(ProtocolOpenRequest obj) /*-{
        return 
            obj["1"] != null 
            && obj["2"] != null;
    }-*/;

    protected ProtocolOpenRequest() {}

    // getters and setters

    // participantId

    public final native String getParticipantId() /*-{
        return this["1"] || "";
    }-*/;

    public final native ProtocolOpenRequest setParticipantId(String participantId) /*-{
        this["1"] = participantId;
        return this;
    }-*/;

    public final native void clearParticipantId() /*-{
        delete this["1"];
    }-*/;

    public final native boolean hasParticipantId() /*-{
        return this["1"] != null;
    }-*/;

    // waveId

    public final native String getWaveId() /*-{
        return this["2"] || "";
    }-*/;

    public final native ProtocolOpenRequest setWaveId(String waveId) /*-{
        this["2"] = waveId;
        return this;
    }-*/;

    public final native void clearWaveId() /*-{
        delete this["2"];
    }-*/;

    public final native boolean hasWaveId() /*-{
        return this["2"] != null;
    }-*/;

    // waveletIdPrefix

    public final native JsArrayString getWaveletIdPrefixArray() /*-{
        return this["3"];
    }-*/;

    public final java.util.List<String> getWaveletIdPrefixList() {
        JsArrayString array = getWaveletIdPrefixArray();
        java.util.List<String> list = new java.util.ArrayList<String>();
        
        if (array == null) {
          return null; 
        }
        for (int i=0; i < getWaveletIdPrefixCount(); i++) {
          list.add(array.get(i));
        }
        return list;
    }

    public final native ProtocolOpenRequest setWaveletIdPrefixArray(JsArrayString waveletIdPrefix) /*-{
        this["3"] = waveletIdPrefix;
        return this;
    }-*/;

    public final native JsArrayString clearWaveletIdPrefixArray() /*-{
        return (this["3"] = []);
    }-*/;

    public final String getWaveletIdPrefix(int index) {
        JsArrayString array = getWaveletIdPrefixArray();
        return array == null ? null : array.get(index);
    }

    public final int getWaveletIdPrefixCount() {
        JsArrayString array = getWaveletIdPrefixArray();
        return array == null ? 0 : array.length();
    }

    public final void addWaveletIdPrefix(String waveletIdPrefix) {
        JsArrayString array = getWaveletIdPrefixArray();
        if(array == null)
            array = clearWaveletIdPrefixArray();
        array.push(waveletIdPrefix);
    }

    // maximumWavelets

    public final native int getMaximumWavelets() /*-{
        return this["4"] || 0;
    }-*/;

    public final native ProtocolOpenRequest setMaximumWavelets(int maximumWavelets) /*-{
        this["4"] = maximumWavelets;
        return this;
    }-*/;

    public final native void clearMaximumWavelets() /*-{
        delete this["4"];
    }-*/;

    public final native boolean hasMaximumWavelets() /*-{
        return this["4"] != null;
    }-*/;

    // snapshots

    public final native boolean getSnapshots() /*-{
        return this["5"] || false;
    }-*/;

    public final native ProtocolOpenRequest setSnapshots(boolean snapshots) /*-{
        this["5"] = snapshots;
        return this;
    }-*/;

    public final native void clearSnapshots() /*-{
        delete this["5"];
    }-*/;

    public final native boolean hasSnapshots() /*-{
        return this["5"] != null;
    }-*/;

    // knownWavelets

    public final native JsArray<WaveletVersion> getKnownWaveletsArray() /*-{
        return this["6"];
    }-*/;

    public final java.util.List<WaveletVersion> getKnownWaveletsList() {
        JsArray<WaveletVersion> array = getKnownWaveletsArray();
        java.util.List<WaveletVersion> list = new java.util.ArrayList<WaveletVersion>();
        
        if (array == null) {
          return null; 
        }
        for (int i=0; i < getKnownWaveletsCount(); i++) {
          list.add(array.get(i));
        }
        return list;
    }

    public final native ProtocolOpenRequest setKnownWaveletsArray(JsArray<WaveletVersion> knownWavelets) /*-{
        this["6"] = knownWavelets;
        return this;
    }-*/;

    public final native JsArray<WaveletVersion> clearKnownWaveletsArray() /*-{
        return (this["6"] = []);
    }-*/;

    public final WaveletVersion getKnownWavelets(int index) {
        JsArray<WaveletVersion> array = getKnownWaveletsArray();
        return array == null ? null : array.get(index);
    }

    public final int getKnownWaveletsCount() {
        JsArray<WaveletVersion> array = getKnownWaveletsArray();
        return array == null ? 0 : array.length();
    }

    public final void addKnownWavelets(WaveletVersion knownWavelets) {
        JsArray<WaveletVersion> array = getKnownWaveletsArray();
        if(array == null)
            array = clearKnownWaveletsArray();
        array.push(knownWavelets);
    }


}