
## Our possible iq children
start = update
      | submit-request | submit-response
      | history-request | history-response

## Envelope to push wavelet operations. Used in iq set stanza.
update =
  element update {
    element wavelet-update {
      attribute wavelet-name { xsd:string },
      applied-delta*,
      commit-notice?
    }+
  }

## Request for historical wavelet operations. Used in iq get stanza.
history-request =
  element history-request {
    attribute wavelet-name { xsd:string },
    attribute start-version { xsd:integer },
    attribute end-version { xsd:integer }?,
    attribute response-length-limit { xsd:integer }?
  }

## Response to history-request. Used in iq result stanza.
history-response =
  element history-response {
    attribute version-truncated-at { xsd:integer }?,
    applied-delta*,
    commit-notice?
  }

## Request to submit operations to a wavelet. Used in iq set stanza.
submit-request =
  element submit-request {
    attribute wavelet-name { xsd:string },
    delta,
    signature,
    address-access*
  }

## Response to submit-request. Used in iq result stanza.
submit-response =
  element submit-response {
    attribute error-message { xsd:string }?,
    attribute operations-applied { xsd:integer },
    attribute application-timestamp { xsd:integer },
    hashed-version
  }

## A wavelet version and the wavelet's history hash at that version.
version-hash-attributes =
  attribute version { xsd:integer } & attribute history-hash { xsd:string }

## Notification of the fact that the host provider has persisted a
## wavelet up to the specified version.
commit-notice =
  element commit-notice {
    version-hash-attributes
  }

## Describes a wavelet version and the wavelet's history hash at that version.
hashed-version =
  element hashed-version {
    version-hash-attributes
  }

## Describes a path through the address access control graph.
address-access =
  element address-access {
    attribute address { xsd:string }
  }

## Contains a sequence of one or more operations grouped for communication to
## and between servers.
delta =
  element delta {
    attribute author { xsd:string },
    hashed-version,
    operation+
  }

## Contains a delta which has been successfully applied to a wavelet by a wave
## server, along with supplementary information about the result of the application.
applied-delta =
  element applied-delta {
    attribute operations-applied { xsd:integer },
    attribute application-timestamp { xsd:integer },
    hashed-version
    delta,
    signature,
  }

## TBD. Shall include the cryptographic signature, a reference to the signing
## certificate, and possibly a timestamp.
signature =
  element signature {
    ## TBD
  }

## Wavelet mutation.
operation =
  element operation {
    element noop { empty }
  | element add-participant {
      attribute address { xsd:string }
    }
  | element remove-participant {
      attribute address { xsd:string }
    }
  | element mutate-document {
      attribute document-id { xsd:string },
      document-mutation-element*
    }
  }

document-mutation-element =
    element skip {
      attribute size { xsd:integer }
    }
  | element characters {
      xsd:string
    }
  | element element-start {
      attribute tag { xsd:string },
      set-attribute*
    }
  | element element-end { empty }
  | element anti-element-start { empty }
  | element anti-element-end {
      set-attribute*
     }
  | element delete-characters {
      attribute size { xsd:integer }
    }
  | element delete-element-start { empty }
  | element delete-element-end { empty }
  | element delete-anti-element-start { empty }
  | element delete-anti-element-end { empty }
  | element set-attributes {
      set-attribute*
    }
  | element update-attributes {
      update-attribute*
    }
  | element start-annotation {
      attribute name { xsd:string },
      attribute value { xsd:string }?
    }
  | element end-annotation {
      attribute name { xsd:string }
    }


## Used to represent an XML attribute inside an XML element that is embedded in a wave
set-attribute =
  element set-attribute {
    attribute name { xsd:string },
    attribute value { xsd:string }
  }

## Used to specify which XML attribute is being updated. Empty value 
## implies deletion.
update-attribute =
  element attribute {
    attribute name { xsd:string },
    attribute value { xsd:string }?
  }
